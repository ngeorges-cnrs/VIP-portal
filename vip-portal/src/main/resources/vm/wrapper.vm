#!/bin/bash

#####################
#     Functions     #
#####################

function info {
  local D=`date`
  echo [ INFO - $D ] $*
}

function warning {
  local D=`date`
  echo [ WARN - $D ] $*
}

function error {
  local D=`date`
  echo [ ERROR - $D ] $* >&2
}

function download_udocker {
  #installation of udocker
  info "cloning udocker ${UDOCKER_TAG} "
  git clone --depth=1 --branch ${UDOCKER_TAG} https://github.com/indigo-dc/udocker.git
  (cd udocker/udocker; ln -s maincmd.py udocker)
  export PATH=`pwd`/udocker/udocker:$PATH
  
  #creating a temporary directory for udocker containers
  mkdir -p containers
  export UDOCKER_CONTAINERS=$PWD/containers
  
  #find pre-deployed containers on CVMFS, and create a symlink to the udocker containers directory
  ## use a global velocity escape to avoid velocity escaping issue
#[[
  for d in ${CONTAINERS_CVMFS_PATH}/*/ ;
     do mkdir containers/$(basename "${d%/}") && ln -s "${d%/}"/* containers/$(basename "${d%/}")/
  done
  cat >docker <<'EOF'
        #!/bin/bash
        MYARGS=$*
        echo "executing ./udocker/udocker/udocker $MYARGS"
        ./udocker/udocker/udocker $MYARGS
EOF
  chmod a+x docker
  export PATH=$PWD:$PATH
}
]]#

function checkBosh {
  local BOSH_CVMFS_PATH=$1
  #by default, use CVMFS bosh
  ${BOSH_CVMFS_PATH}/bosh create foo.sh 
  if [ $? != 0 ]
  then
    info "CVMFS bosh in ${BOSH_CVMFS_PATH} not working, checking for a local version"
    bosh create foo.sh 
    if [ $? != 0 ]
    then
        info "bosh is not found in PATH or it is does not work fine, searching for another local version"
        local HOMEBOSH=`find $HOME -name bosh`
        if [ -z "$HOMEBOSH" ]
        then
            info "bosh not found, trying to install it"
            export PATH="$HOME/.local/bin:$PATH"
            pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --user boutiques
            if [ $? != 0 ]
            then
                error "pip install boutiques failed"
                exit 1
            else
                export BOSHEXEC="bosh"
            fi
        else
            info "local bosh found in $HOMEBOSH"
            export BOSHEXEC=$HOMEBOSH
        fi
    else # bosh is found in PATH and works fine
        info "local bosh found in $PATH"
        export BOSHEXEC="bosh"
    fi
  else # if bosh CVMFS works fine
    export BOSHEXEC="${BOSH_CVMFS_PATH}/bosh"
  fi
}

function copyProvenanceFile() {
  local dest=$1
  # $BOUTIQUES_PROV_DIR is defined by GASW from the settings file
  if [ ! -d "$BOUTIQUES_PROV_DIR" ]; then
    error "Boutiques cache dir $BOUTIQUES_PROV_DIR does not exist."
    return 1
  fi
  local provenanceFile=$(ls -t "$BOUTIQUES_PROV_DIR" | grep -v "^descriptor_" | head -n 1)
  if [[ -z "$provenanceFile" ]]; then
    error "No provenance found in boutiques cache $BOUTIQUES_PROV_DIR"
    return 2
  fi
  info "Found provenance file $BOUTIQUES_PROV_DIR/$provenanceFile"
  info "Copying it to $dest"
  cp $BOUTIQUES_PROV_DIR/$provenanceFile $dest
}

#####################
# Arguments parsing #
#####################

shift # first parameter is always results directory

cat << JSONPARAMETERS  > input_param_file.json
{
JSONPARAMETERS

firstParam=true
while [[ $# > 0 ]]
do
key="$1"
case $key in
    #foreach($input in $tool.getInputs())
--$input.getId().toLowerCase())
        if [ "$2" != "No_value_provided" ]
        then
            #if($input.getType().getCamelName()=="Flag")
            if [ "$firstParam" != true ] && [ "$2" = true ]
            #else
            if [ "$firstParam" != true ]
            #end
            then 
                echo "," >> input_param_file.json
            fi
            #if($input.getType().getCamelName()=="Flag") ## for the current boutiques version, a flag must be true or absent (false not allowed)
            if [ "$2" = true ]
            then
                echo "\"$input.getId()\": $2"  >> input_param_file.json
                firstParam=false
            fi
            #elseif($input.getType().getCamelName()=="Number")
            echo "\"$input.getId()\": $2"  >> input_param_file.json
            firstParam=false
            #else ## text or file, put in quotes
            echo "\"$input.getId()\": \"$2\""  >> input_param_file.json
            firstParam=false
            #end
        fi
    ;;
    #end
*) # unknown option
esac
shift # past argument or value
shift
done

cat << JSONPARAMETERS  >> input_param_file.json
}
JSONPARAMETERS

##########################
# Command-line execution #
##########################

# BOSH_CVMFS_PATH is defined by GASW from the settings file
checkBosh $BOSH_CVMFS_PATH

# Clone udocker (A basic user tool to execute simple docker containers in batch or interactive systems without root privileges)

#if($tool.getContainerType() == "docker")
if ! command -v docker
then
    download_udocker
fi
#end

# Check that singularity is in PATH

#if($tool.getContainerType() == "singularity")
# command -v displays the path to singularity if found
info "checking for singularity"
if ! command -v singularity
then
    if test -d "$singularityPath"; then
        export PATH="$singularityPath:$PATH"
        info "adding singularityPath to PATH ($singularityPath)"
    else
        warning "singularityPath not found ($singularityPath), leaving PATH unchanged"
    fi
fi
#end

#creating a temporary directory for bindmount /tmp of containers
#TMP_FOLDER is created differently for execution on GRID and execution on LOCAL
#TMP of the container is bind mounted on TMP_FOLDER to avoid creating temporary files on container.
TMP_FOLDER=tmp_$(basename $PWD)
#if($isRunOnGrid == false)
TMP_FOLDER=/tmp/$TMP_FOLDER
#else
TMP_FOLDER=../$TMP_FOLDER
#end
mkdir -p $TMP_FOLDER

#set($jsonFile="${tool.getName()}.json")

#if($imagepath)
PYTHONPATH=".:$PYTHONPATH" $BOSHEXEC exec launch --stream --imagepath $imagepath $jsonFile input_param_file.json -v $PWD/../cache:$PWD/../cache -v $TMP_FOLDER:/tmp
#else
PYTHONPATH=".:$PYTHONPATH" $BOSHEXEC exec launch --stream $jsonFile input_param_file.json -v $PWD/../cache:$PWD/../cache -v $TMP_FOLDER:/tmp
#end

if [ $? != 0 ]
then
    error "$tool.name execution failed!"
    exit 1
fi

copyProvenanceFile "./provenance.json"
info "Execution of $tool.getName() completed."

